{
    "collab_server" : "",
    "contents" : "\n## makeCacheMatrix and cacheSolve are intented to be used in tandem\n## to efficiently manage repeated matrix inversion.\n##\n## mc <- makeCacheMatrix(mat)\n## mSolved <- cacheSolve(mc)\n## mSolved2 <- cacheSolve(mc)\n## ...\n##\n## the first call to cacheSolve with a given makeCacheMatrix object,\n## the matrix will be inverted and the result cached\n##\n## on subsequent calls to cacheSolve with the makeCacheMatrix object,\n## the cached inversion will be returned\n\nmakeCacheMatrix <- function(x = matrix()) {\n  # Args:\n  #   x: a matrix. Assumed to be invertible\n  #\n  # Returns:\n  #   Object with list of functions:\n  #     get() gets matrix\n  #     set() sets matrix\n  #     getsolve(...) gets inverted matrix\n  \n  #   verbose: If TRUE, prints notifications. Default is FALSE.\n  #       Should be an argument, but that is not what the assignment called for.\n  verbose <- FALSE\n  \n  # the cached solve value.\n  solved <- NULL\n\n  # update the matrix\n  set <- function(y) {\n    x <<- y\n    solved <<- NULL\n  }\n\n  # return the matrix\n  get <- function() x\n\n  # getsolve: the only way to get the inverted matrix\n  getsolve <- function(...) {\n    \n    if (is.null(solved)) {\n      if (verbose) {\n        message(\"inverting matrix\")\n      }\n      # Cache the inversion\n      solved <<- solve(x, ...)\n    } else if (verbose) {\n      message(\"using cached inversion\")\n    }\n    \n    solved\n  }\n  \n  list(set = set, get = get,\n       getsolve = getsolve)\n}\n\n\n## Get an inverted matrix\n\ncacheSolve <- function(x, ...) {\n  # Args:\n  #   x: a makeCacheMatrix object\n  # Returns:\n  #   inverted matrix of x\n  \n  x$getsolve(...)\n}\n",
    "created" : 1467903436494.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3408827059",
    "id" : "19C2E89E",
    "lastKnownWriteTime" : 1467913239,
    "last_content_update" : 1467913239220,
    "path" : "~/GitHub/ProgrammingAssignment2/cachematrix.R",
    "project_path" : "cachematrix.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}